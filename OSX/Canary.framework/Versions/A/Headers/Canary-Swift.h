// Generated by Apple Swift version 2.3 (swiftlang-800.10.11 clang-800.0.36)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"


/// The data object to present the state of the object
SWIFT_CLASS("_TtC6Canary7CNState")
@interface CNState : NSObject

/// Add observer object of this state
///
/// \param observer Observer object
- (void)addStateObserver:(NSObject * _Nonnull)observer;

/// Stop the object to observe this state
///
/// \param observer Object to stop observing this state
- (void)removeStateObserver:(NSObject * _Nonnull)observer;

/// Increment the update count. This method will be called
- (void)updateState;
+ (NSString * _Nonnull)stateKey;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Canary15CNCombinedState")
@interface CNCombinedState : CNState
- (void)addSourceState:(CNState * _Nonnull)state;
@property (nonatomic, readonly, copy) NSArray<CNState *> * _Nonnull sourceStates;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSString *, id> * _Nullable)change context:(void * _Null_unspecified)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Canary9CNConsole")
@interface CNConsole : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)printWithString:(NSString * _Nonnull)src;
@end

@class NSNumber;
@class NSString;
@class NSDate;
@class NSDictionary;
@class NSArray;

SWIFT_CLASS("_TtC6Canary15CNObjectVisitor")
@interface CNObjectVisitor : NSObject
- (void)acceptObject:(NSObject * _Nonnull)object;
- (void)visitNumberObject:(NSNumber * _Nonnull)number;
- (void)visitStringObject:(NSString * _Nonnull)string;
- (void)visitDateObject:(NSDate * _Nonnull)date;
- (void)visitDictionaryObject:(NSDictionary * _Nonnull)dict;
- (void)visitArrayObject:(NSArray * _Nonnull)arr;
- (void)visitUnknownObject:(NSObject * _Nonnull)obj;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Canary17CNRedirectConsole")
@interface CNRedirectConsole : CNConsole
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addOutput:(CNConsole * _Nonnull)console;
- (void)removeAllOutputs;
- (void)printWithString:(NSString * _Nonnull)src;
@end



SWIFT_CLASS("_TtC6Canary15CNStateObserver")
@interface CNStateObserver : NSObject
@property (nonatomic, strong) CNState * _Nullable state;
@property (nonatomic, copy) void (^ _Nullable callback)(CNState * _Nonnull state);
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSString *, id> * _Nullable)change context:(void * _Null_unspecified)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Canary13CNTextConsole")
@interface CNTextConsole : CNConsole
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSError (SWIFT_EXTENSION(Canary))
+ (NSString * _Nonnull)domain;
+ (NSString * _Nonnull)errorLocationKey;
+ (NSError * _Nonnull)parseError:(NSString * _Nonnull)message;
+ (NSError * _Nonnull)parseError:(NSString * _Nonnull)message location:(NSString * _Nonnull)location;
+ (NSError * _Nonnull)fileError:(NSString * _Nonnull)message;
+ (NSError * _Nonnull)fileError:(NSString * _Nonnull)message location:(NSString * _Nonnull)location;
+ (NSError * _Nonnull)serializeError:(NSString * _Nonnull)message;
+ (NSError * _Nonnull)serializeError:(NSString * _Nonnull)message location:(NSString * _Nonnull)location;
- (NSString * _Nonnull)toString;
@end


@interface NSURL (SWIFT_EXTENSION(Canary))

/// Open the panel to select input file
///
/// \param title Title of the open panel
///
/// \param fileTypes Target file types to open
///
/// \param openFileCallback Callback function to be called when the file is seleted
+ (void)openPanel:(NSString * _Nonnull)title fileTypes:(NSArray<NSString *> * _Nullable)types openFileCallback:(void (^ _Nonnull)(NSArray<NSURL *> * _Nonnull result))openFileCallback;

/// Open the panel to select the file to save the current context
///
/// \param title Title of the save panel
///
/// \param outputDirectory Default parent directory to save the file
///
/// \param saveFileCallback Callback function to be called when the file is selected
///
/// \returns  Yes when the file is seleted to save
+ (void)savePanel:(NSString * _Nonnull)title outputDirectory:(NSURL * _Nullable)outdir saveFileCallback:(BOOL (^ _Nonnull)(NSURL * _Nonnull result))saveFileCallback;
+ (NSURL * _Nonnull)relativePathWithSourceURL:(NSURL * _Nonnull)src baseDirectory:(NSURL * _Nonnull)base;
@end

#pragma clang diagnostic pop
